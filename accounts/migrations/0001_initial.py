# Generated by Django 3.0 on 2021-05-11 11:31

from django.db import migrations, models

import accounts.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=10, verbose_name="phone number"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=30, verbose_name="first name"),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="middle name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(max_length=30, verbose_name="last name"),
                ),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="staff status"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                ("zip", models.CharField(blank=True, max_length=10)),
                ("city", models.CharField(blank=True, max_length=16)),
                (
                    "country",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="countery"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("", "No role"),
                            ("admin", "Admin"),
                            ("human_resource", "HR"),
                            ("teamlead", "Teamlead"),
                            ("developer", "Developer"),
                        ],
                        max_length=20,
                    ),
                ),
                ("total_leaves", models.DecimalField(decimal_places=2, max_digits=3)),
                (
                    "remaining_leaves",
                    models.DecimalField(decimal_places=2, max_digits=3),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
                "swappable": "AUTH_USER_MODEL",
            },
            managers=[
                ("objects", accounts.models.UserManager()),
            ],
        ),
    ]
